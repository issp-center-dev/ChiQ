Single band Hubbard model
~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this tutorial, we calculate the susceptibility of the single band Hubbard model on the square lattice by using the BSE, RPA, and SCL approximations with the DMFT.
Sample files for this tutorial are available at ``examples/square_bse`` (BSE), ``examples/square_rpa`` (RPA), and ``examples/square_scl`` (SCL).

Model
-----

As the first example, we consider the single band Hubbard model on the :math:`32 \times 32` square lattice with the periodic boundary condition,

.. math::

  \mathcal{H} = \sum_{\boldsymbol{k}, \sigma} \varepsilon_{\boldsymbol{k}} c_{\boldsymbol{k}\sigma}^\dagger c_{\boldsymbol{k}\sigma} + U \sum_i n_{i\uparrow} n_{i\downarrow},

where :math:`\varepsilon_{\boldsymbol{k}} = -2t(\cos k_x + \cos k_y)` is the dispersion relation of the non-interacting electrons with momentum :math:`\boldsymbol{k}` and :math:`t` is the hopping constant.
:math:`c_{\boldsymbol{k}\sigma}^\dagger` and :math:`c_{\boldsymbol{k}\sigma}` are the creation and annihilation operators of electrons with momentum :math:`\boldsymbol{k}` and spin :math:`\sigma`, respectively,
and :math:`n_{i\sigma} = c_{i\sigma}^\dagger c_{i\sigma}` is the number operator of electrons with spin :math:`\sigma` at site :math:`i`.
The onsite Coulomb interaction strength is denoted by :math:`U`.
We consider the half-filled case with one electron per site.
The parameters are set to be :math:`t = 1.0` (the unit of energy), :math:`U = 8.0`.
We can fix the chemical potential as :math:`\mu = U/2 = 4.0`.
The temperature is set to be :math:`T = 0.5` and the number of Matsubara frequencies is set to be :math:`N_{\text{freq}} = 1024`.
The impurity solver in the DMFT loop is the Hubbard-I (the exact diagonalization with no bath sites).
We can safely set the number of DMFT iterations to be :math:`N_{\text{iter}} = 1`.

DMFT calculation with DCore
----------------------------

To implement this setup, `an input file of DCore dmft_square.in <https://issp-center-dev.github.io/DCore/master/reference/input.html>`_ is prepared as follows,

.. literalinclude:: ../../examples/square_bse/dmft_square.in
  :language: ini

In this example, the Wannier90 format is used to describe the hopping constants (set ``lattice = wannier90``).
Because ``seed = square``, the hopping constants are read from the following file ``square_hr.dat``,

.. literalinclude:: ../../examples/square_bse/square_hr.dat
  :language: text

This file says that the number of the orbitals in the unit cell is 1 and the electrons hop to the nearest neighbors on a square lattice with :math:`t = 1.0` (watch out the sign of the hopping constant).
For details, see `the paper of DCore <https://scipost.org/10.21468/SciPostPhys.10.5.117>`_ and `the Wannier90 manual <https://wannier90.readthedocs.io/en/latest/user_guide/wannier90/files/#seedname_hrdat>`_.

Before running the DMFT calculation, make sure that ``pomerol2dcore`` is installed and in your PATH.
A DMFT calculation is performed with DCore as follows (we will use 4 MPI processes in the following):

.. code-block:: bash

  dcore_pre dmft_square.in
  dcore --np 4 dmft_square.in

After the DMFT loop is finished, the impurity problem is solved again to calculate the bare two-particle Green's functions :math:`\hat{X}_0` and the local two-particle Green's function :math:`\hat{X}_\text{loc}` (see :ref:`Algorithm_BSE`).
The number of the fermionic and bosonic Matsubara frequencies :math:`\omega_n` and :math:`\Omega_m` are specified by the keywords ``num_wf`` and ``num_wb``, respectively, in the ``[bse]`` section of the input file of DCore (see above).
``X0q_qpoints_saved`` is the file name describing :math:`(\boldsymbol{q}, i\Omega_m)` points where :math:`\hat{X}_0` and :math:`\hat{X}_\text{loc}` are calculated.
Generally, a :ref:`q-path file <reference_q_path_dat>` is used as this file.

To generate the q-path file easily, an utility script :ref:`gen_qpath.py <program_gen_qpath>` is available.
By using the following :ref:`symmetry point file qpath.in <reference_qpath_in>`

.. literalinclude:: ../../examples/square_bse/qpath.in
  :language: text

and the input file of DCore ``dmft_square.in``, the q-path file ``q_path.dat`` is generated by the following command

.. code-block:: bash

  gen_qpath.py dmft_square.in qpath.in

Once the input files are prepared, the following command:

.. code-block:: bash

  dcore_bse --np 4 dmft_square.in

calculates :math:`\hat{X}_0` and :math:`\hat{X}_\text{loc}` and writes them to :ref:`one of the input file of BSE, dmft_bse.h5 <reference_hdf5_input>` .


BSE calculation with **ChiQ**
------------------------------

The following is `the input file of ChiQ bse.in <reference_bse_in>`_:

.. literalinclude:: ../../examples/square_bse/bse.in
  :language: toml

``[bse_common]`` section is common to all the ChiQ scripts.
The ``input`` keyword specifies the HDF5 file including the Green's functions, which is the output file of ``dcore_bse``.
The ``output`` keyword specifies the HDF5 file to store the results of BSE calculation (e.g., the susceptibility).
The ``type`` keyword specifies the approximation method in calculating the susceptibility.
The ``omega_q`` keyword specifies the q-path file.

The BSE calculation is performed by :ref:`bse_tool.py <program_bse_tool>`.
The following command calculates the susceptibility :math:`\chi_{ijkl}(\boldsymbol{q}, i\Omega_m)` and writes the result to :ref:`the file dmft_bse.out.h5 <reference_hdf5_output>` :

.. code-block:: bash

  mpiexec --np 4 bse_tool.py bse.in

The calculation log from each process is saved in the directory specified by the ``work_dir`` keyword in the ``[bse_tool]`` section.

Because the number of the spin-orbitals is 2 (up and down spin), the calculated susceptibility at each q-point is represented as :math:`4 \times 4` matrix, :math:`\chi_{ij,kl}`.
To analyze further, we need to diagonalize the susceptibility matrix (see :ref:`Algorithm_Eigen`).
``bse_post.py`` is used to calculate the eigenvalues of them.
The parameters are specified by the ``[bse_post]`` section.
The ``mode`` keyword specifies how to calculate the eigenvalues. ``'eigen'`` calculates the eigenvalues by diagonalizing the susceptibility matrix.

The following command calculates the eigenvalues and eigenvectors of the susceptibility matrix :

.. code-block:: bash

  mpiexec --np 4 bse_post.py bse.in

The result is saved in the text files like ``chi_q_eigen.dat`` in the directory specified by the ``output_dir`` keyword in the ``[bse_post]`` section.
The eigenvalue files have :math:`2 + N_\text{eigen}` columns, where :math:`N_\text{eigen}` is the number of the eigenvalues.
The first two columns are the index of the bosonic Matsubara frequency :math:`m` of :math:`\nu_m` and the index of the q-point :math:`\boldsymbol{q}`, respectively, as same as the q-path file.
The remaining columns are the eigenvalues.

``chi_q_eigen.dat`` is the file for the BSE calculation.
For the RPA, RRPA, and SCL calculation, the file name is ``chi_q_rrpa_eigen.dat``, ``chi_q_rrpa_eigen.dat``, and ``chi_q_scl_eigen.dat``, respectively.

If you set the ``vector`` keyword in the ``[bse_post]`` section to ``true``, the eigenvectors at k-points are also saved in the files like ``chi_q_eigenvec.00.00.00.dat``.
``eigenvec_viewer.py`` helps to analyze the eigenvectors.
For details of the eigenvector file format and the usage of ``eigenvec_viewer.py``, see :ref:`program_eigenvec_viewer`.

Finally, :ref:`plot_chiq_path.py <program_plot_chiq_path>` plots the eigenvalues ``*_eigen_path.pdf`` and their inverse ``*_eigen_path_inv.pdf`` along the q-path.
The first argument is the q-path file, and the second argument is the eigenvalue file.

.. code-block:: bash

  # Make sure that you are in the output directory of bse_post.py
  plot_chiq_path.py ../q_path.dat chi_q_eigen.dat

The following figure is the result of the BSE calculation (``chi_q_eigen_path.pdf``).
The susceptibility has a sharp peak at the M point, :math:`\boldsymbol{q} = (\pi, \pi)`, indicating the growth of the antiferromagnetic fluctuations.

.. figure:: single_orb/chi_q_eigen_path.*
  :align: center

  The eigenvalues of the two-body susceptibility calculated by solving the BSE.

Random phase approximation (RPA)
--------------------------------

**ChiQ** also provides the RPA calculation.
In the RPA calculation, the interaction is taken into account only via the symmetrized vertex function :math:`\hat{\gamma}`, not via the self-energy :math:`\Sigma`.
So, the DMFT calculation needs to be solved with the "null" solver, which gives the self-energy :math:`\Sigma = 0` (see :ref:`Algorithm_RPA`).
The input file of DCore follows:

.. literalinclude:: ../../examples/square_rpa/dmft_square.in

Note that the interaction strength :math:`U` is set to be one, not eight.
This is because the RPA overestimates the Neel temperature, and hence the point :math:`U=8` and :math:`T=0.5` is the antiferromagnetic phase and too far from the phase transition point.
It should also be noted that the chemical potential :math:`\mu` is set to be zero, because the DMFT loop is calculated as :math:`U=0`.

In the input file ``bse.in``, the only difference from the previous calculation is that the ``type`` keyword of ``[bse_common]`` section is set to ``['chi0', 'rpa']``.

.. literalinclude:: ../../examples/square_rpa/bse.in
  :language: toml

The workflow is the same as the previous calculation.
Note that the names of the output files by the RPA calculation start with ``chi_q_rpa_``.

.. code-block:: bash

  dcore_pre dmft_square.in
  dcore --np 4 dmft_square.in
  gen_qpath.py dmft_square.in qpath.in
  dcore_bse --np 4 dmft_square.in
  mpiexec --np 4 bse_tool.py bse.in
  mpiexec --np 4 bse_post.py bse.in
  cd bse
  plot_chiq_path.py ../q_path.dat chi_q_rpa_eigen.dat


.. figure:: single_orb/chi_q_rpa_eigen_path.*
  :align: center

  The eigenvalues of the two-body susceptibility calculated by the RPA.


Strong coupling limit formula (SCL)
------------------------------------

Finally, **ChiQ** provides the calculation tool based on the strong coupling limit formula (SCL) (see :ref:`Algorithm_SCL`).
The input file of DCore is the same as the previous BSE calculation.

Instead of ``bse_tool.py``, :ref:`calc_Iq_scl.py <program_calc_iq_scl>` is used to calculate the susceptibility.
The input file is ``scl_2pole.in``:

.. literalinclude:: ../../examples/square_scl/scl_2pole.in
  :language: toml

The following command calculates the susceptibility :

.. code-block:: bash

  calc_Iq_scl.py scl_2pole.in

After that, ``bse_post.py`` and ``plot_chiq_path.py`` are used to analyze the result in the same way as the BSE calculation.
The input file of ``bse_post.py``, ``bse.in``, differs from the previous BSE example only in the ``type`` keyword of ``[bse_common]`` section;
The ``type`` keyword is set to ``['chi0', 'scl']``.

.. literalinclude:: ../../examples/square_scl/bse.in
  :language: toml

The following figure is the result of the SCL calculation.

.. figure:: single_orb/chi_q_scl_eigen_path.*
  :align: center

  The eigenvalues of the two-body susceptibility calculated by the SCL.
